Interface:
Interface is a class where by default all the methods are public abstract
all the variables declared inside the interface are final and static should be initialized when declared
these varibles can be directly access using class

you can have multiple inheritance using interface
interfaces can be inherited

interface A {
    int age = 22; // final and static
    String area = "Hyd"; // final and static

    void show();

    void config();
}

interface X {
    void run();

    void show();
}

interface Y extends X {

}

class B implements A, Y {
    public void show() {
        System.out.println("show B");
    }
    public void run() {
        System.out.println("run B");
    }
    public void config() {
        System.out.println("config B");
    }
}

public class Impinterface {
    public static void main(String a[]) {
        A obj;
        obj = new B();
        obj.show();
        obj.config();

        // obj.run();
        B obj1 = new B();
        obj1.run();

        X obj2 = new B();
        obj2.run();
    }
}



/*

abstract class Computer
{
//	public void code()
//	{
//		
//	}
	public abstract void code();
}

class Laptop extends Computer
{
	public void code()
	{
		System.out.println("code, compile, run");
	}

}

class Desktop extends Computer
{
	public void code()
	{
		System.out.println("code, compile, faster");
	}
}
class Developer
{
//	public void devApp(Laptop lap)
	public void devApp(Computer lap)
	{
		lap.code();
	}
}

public class Demo {
    public static void main(String[] args) {
//        Laptop lap=new Laptop();
//        Desktop desk=new Desktop();
        
        Computer lap=new Laptop();
        Computer desk=new Desktop();
        
        Developer navin=new Developer();
        navin.devApp(lap);
        
    }
}
*/



interface Computer
{
	 void code();
}

class Laptop implements Computer
{
	public void code()
	{
		System.out.println("code, compile, run");
	}

}

class Desktop implements Computer
{
	public void code()
	{
		System.out.println("code, compile, faster");
	}
}
class Developer
{
//	public void devApp(Laptop lap)
	public void devApp(Computer lap)
	{
		lap.code();
	}
}

public class Demo {
    public static void main(String[] args) {
//        Laptop lap=new Laptop();
//        Desktop desk=new Desktop();
        
        Computer lap=new Laptop();
        Computer desk=new Desktop();
        
        Developer navin=new Developer();
        navin.devApp(lap);
        
    }
}
